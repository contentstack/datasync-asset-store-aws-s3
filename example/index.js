const assetStore = require('../dist')
const config = {
  assetStore: {
    bucketParams: {
      Bucket: 'dev-contentstack-asset-store-aws-s3'
    },
    credentials: {
      accessKeyId: '',
      secretAccessKey: ''
    },
    Policy: {
      Statement: [
        {
          Sid: 'AddPerm',
          Effect: 'Allow',
          Principal: '*',
          Action: ['s3:GetObject'],
          Resource: ['arn:aws:s3:::dev-contentstack-asset-store-aws-s3/*'] // Required
        }
      ]
    },
    // `apiVersion`, `apiKey` and `downloadId` can be generated by using an asset's url pattern
    pattern: '/:apiKey/:uid/:downloadId/:filename'
  }
}

const asset1 = {
  locale: 'en-us',
  uid: 'c3',
  content_type_uid: '_assets',
  filename: 'cloudflare.png',
  title: 'Cloud Flare PNG',
  url: 'https://images.contentstack.io/v3/assets/blt01e28ab17409dbb8/bltaebcea665c590697/5cab4f69ccbd2f3c64dffdfc/cloudflare.png'
}

const asset2 = {
  locale: 'es-es',
  uid: 'c4',
  content_type_uid: '_assets',
  filename: 'twitter.png',
  title: 'Twitter PNG',
  url: 'https://images.contentstack.io/v3/assets/blt01e28ab17409dbb8/blt7a92d068384b324e/5ca4b731ce43ee1933310f48/twitter.png?disposition=inline'
}

let s3
assetStore.setConfig(config)
assetStore.start()
  .then((s3Instance) => {
    s3 = s3Instance
    return s3.download(asset1)
  })
  .then((assetResponse1) => {
    console.log('asset download response')
    console.log(JSON.stringify(assetResponse1))
    return s3.unpublish(assetResponse1)
  })
  .then((assetResponse2) => {
    console.log('asset unpublish response')
    console.log(JSON.stringify(assetResponse2))
    return s3.download(asset2)
  })
  .then((assetResponse3) => {
    console.log('asset download response')
    console.log(JSON.stringify(assetResponse3))
    return s3.delete([assetResponse3])
  })
  .then((assetResponse4) => {
    console.log('asset delete response')
    console.log(JSON.stringify(assetResponse4))
    console.log('exit')
  })
  .catch(console.error)